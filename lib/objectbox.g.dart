// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_sync_flutter_libs/objectbox_sync_flutter_libs.dart';

import 'models/customer.dart';
import 'models/detail_pembelian.dart';
import 'models/detail_stock.dart';
import 'models/invoice.dart';
import 'models/invoice/payment.dart';
import 'models/mpi.dart';
import 'models/mpi/mpiItem.dart';
import 'models/pembelian.dart';
import 'models/realization.dart';
import 'models/spk.dart';
import 'models/stock.dart';
import 'models/stockService/stock_realization.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 5940839075046386972),
      name: 'Customer',
      lastPropertyId: const IdUid(10, 4848643886833820842),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3334380624085582952),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 3743172502888674310),
            name: 'csId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5373834998850228584),
            name: 'customerName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8495019545328665390),
            name: 'policeNumber',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6095320527108320932),
            name: 'namaKendaraan',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1373077184219123473),
            name: 'alamat',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4325431187121325821),
            name: 'spkId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 1648646311240715829),
            relationTarget: 'Spk'),
        ModelProperty(
            id: const IdUid(8, 7653073695759413262),
            name: 'invId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 6431121982116132590),
            relationTarget: 'Invoice'),
        ModelProperty(
            id: const IdUid(9, 4990540328765844866),
            name: 'realizationId',
            type: 11,
            flags: 520,
            indexId: const IdUid(3, 2076717469400698343),
            relationTarget: 'Realization'),
        ModelProperty(
            id: const IdUid(10, 4848643886833820842),
            name: 'mpiId',
            type: 11,
            flags: 520,
            indexId: const IdUid(4, 8966120919406401774),
            relationTarget: 'Mpi')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 1893693692319298878),
      name: 'DetailPembelian',
      lastPropertyId: const IdUid(7, 6276944951780806616),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4262925710731915996),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 1089381999356735172),
            name: 'partName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 319604359527799461),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2821232249463450975),
            name: 'pihakId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7384685775913392135),
            name: 'count',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5360100519347563885),
            name: 'price',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6276944951780806616),
            name: 'totalPrice',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 7568864239375287770),
      name: 'DetailStock',
      lastPropertyId: const IdUid(7, 6865755267777916843),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7762719989353228149),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 3193388551949494416),
            name: 'date',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8733427116212265497),
            name: 'supplier',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8254486183134166101),
            name: 'pihakId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2737904049205142566),
            name: 'count',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4962580340308686776),
            name: 'price',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6865755267777916843),
            name: 'totalPrice',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 4927101502051655259),
      name: 'Invoice',
      lastPropertyId: const IdUid(8, 2821423918368117358),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 855169289425559999),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 890843998666838763),
            name: 'invId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8025810044530219408),
            name: 'saldo',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1040159966596129526),
            name: 'partTotal',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5453323502756082876),
            name: 'serviceTotal',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7865319909650665670),
            name: 'invoiceTotal',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3722333878763915296),
            name: 'invoiceDate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2821423918368117358),
            name: 'soDate',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 6951016594400355086),
            name: 'payments',
            targetId: const IdUid(7, 1344934785983686601))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 399171198333312925),
      name: 'Mpi',
      lastPropertyId: const IdUid(2, 4789531471469490346),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 715319988484112048),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 4789531471469490346),
            name: 'mpiId',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(2, 1716581623904238498),
            name: 'items',
            targetId: const IdUid(6, 2493947034834887019))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 2493947034834887019),
      name: 'MpiItem',
      lastPropertyId: const IdUid(7, 332851692985041709),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7168141506659242819),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 4882894564623755670),
            name: 'category',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1360637473830052342),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1969388006320258352),
            name: 'price',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 451536950423916523),
            name: 'remark',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 9160575339128164488),
            name: 'done',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 332851692985041709),
            name: 'attention',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 1344934785983686601),
      name: 'Payment',
      lastPropertyId: const IdUid(3, 3857460886081792775),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6891279256835827940),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 916865843506081472),
            name: 'pay',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3857460886081792775),
            name: 'date',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(8, 6854124424436056280),
      name: 'Realization',
      lastPropertyId: const IdUid(6, 4958957464737520312),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5528354807620841596),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 3532765961746225045),
            name: 'rlId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 9101839221259561437),
            name: 'selesai',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6776232417315224565),
            name: 'biyaya',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5253746439405765399),
            name: 'dateOut',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4958957464737520312),
            name: 'done',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(3, 6489415139149001640),
            name: 'mpiItems',
            targetId: const IdUid(6, 2493947034834887019)),
        ModelRelation(
            id: const IdUid(4, 2637648560284212799),
            name: 'stockItems',
            targetId: const IdUid(11, 4801958333113213934))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(9, 6748891474984641867),
      name: 'Spk',
      lastPropertyId: const IdUid(22, 370057610262735551),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7108351202249696107),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 9217894067082277530),
            name: 'jtId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2188020648179166380),
            name: 'customerName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6867780484614742373),
            name: 'policeNumber',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1013134450438696213),
            name: 'namaKendaraan',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1787639405432806715),
            name: 'tipeKendaraan',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5433450373227060906),
            name: 'levelPekerjaan',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 1974317160668906319),
            name: 'date',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 5963425988886987699),
            name: 'km',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 2729421701514977066),
            name: 'noPkb',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 1536717618226749250),
            name: 'noRangka',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 7749812998448869026),
            name: 'alamat',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 2433584425919259896),
            name: 'analisa',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 3437057610954394025),
            name: 'keluhanKonsumen',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 8258070655031960907),
            name: 'jenisPekrjaan',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 7416176072328655469),
            name: 'sukuCadang',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 4615101048966732368),
            name: 'catatan',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 600724080155397),
            name: 'namaMekanik',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 4557343874647823511),
            name: 'estimasiBiyaya',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 8431174184394488032),
            name: 'estimasiSelesai',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 1380733927177350314),
            name: 'namaInspeektor',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 370057610262735551),
            name: 'namaAdvisor',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(10, 210656727990551802),
      name: 'Stock',
      lastPropertyId: const IdUid(7, 4884606026041660974),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8895299501874469698),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 3399934783977994253),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6962015021503114926),
            name: 'partname',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5209503318764937690),
            name: 'desc',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4833436629377263178),
            name: 'count',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 9211850904653798034),
            name: 'totalPrice',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4884606026041660974),
            name: 'date',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(5, 9048267729678541388),
            name: 'items',
            targetId: const IdUid(3, 7568864239375287770))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(11, 4801958333113213934),
      name: 'StockRalization',
      lastPropertyId: const IdUid(10, 2419410620897939642),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5576859134601049826),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 8522699021260005304),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4369997095202561980),
            name: 'partname',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6776229607949920883),
            name: 'desc',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6963000975941016086),
            name: 'realizationId',
            type: 11,
            flags: 520,
            indexId: const IdUid(5, 5470750569549634248),
            relationTarget: 'Stock'),
        ModelProperty(
            id: const IdUid(6, 125346125475571302),
            name: 'count',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 804977069691342748),
            name: 'price',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4426198007510870296),
            name: 'servicePrice',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 6466295298478217972),
            name: 'toalPrice',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 2419410620897939642),
            name: 'done',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(12, 2653702169053907931),
      name: 'Supplier',
      lastPropertyId: const IdUid(6, 6568972473067054484),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2820536221447611568),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 7827690096099587482),
            name: 'supplier',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1371527393792098463),
            name: 'desc',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7278879144258722735),
            name: 'count',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 287724647740195389),
            name: 'date',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6568972473067054484),
            name: 'totalPrice',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(6, 7438706400471164610),
            name: 'items',
            targetId: const IdUid(2, 1893693692319298878)),
        ModelRelation(
            id: const IdUid(7, 6942223378879037308),
            name: 'stockItems',
            targetId: const IdUid(10, 210656727990551802)),
        ModelRelation(
            id: const IdUid(8, 6741306440934558990),
            name: 'detailStockItems',
            targetId: const IdUid(3, 7568864239375287770))
      ],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(12, 2653702169053907931),
      lastIndexId: const IdUid(5, 5470750569549634248),
      lastRelationId: const IdUid(8, 6741306440934558990),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Customer: EntityDefinition<Customer>(
        model: _entities[0],
        toOneRelations: (Customer object) =>
            [object.spk, object.inv, object.realization, object.mpi],
        toManyRelations: (Customer object) => {},
        getId: (Customer object) => object.id,
        setId: (Customer object, int id) {
          object.id = id;
        },
        objectToFB: (Customer object, fb.Builder fbb) {
          final csIdOffset = fbb.writeString(object.csId);
          final customerNameOffset = fbb.writeString(object.customerName);
          final policeNumberOffset = fbb.writeString(object.policeNumber);
          final namaKendaraanOffset = fbb.writeString(object.namaKendaraan);
          final alamatOffset = fbb.writeString(object.alamat);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, csIdOffset);
          fbb.addOffset(2, customerNameOffset);
          fbb.addOffset(3, policeNumberOffset);
          fbb.addOffset(4, namaKendaraanOffset);
          fbb.addOffset(5, alamatOffset);
          fbb.addInt64(6, object.spk.targetId);
          fbb.addInt64(7, object.inv.targetId);
          fbb.addInt64(8, object.realization.targetId);
          fbb.addInt64(9, object.mpi.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Customer(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              csId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              customerName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              policeNumber: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              namaKendaraan: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              alamat: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''));
          object.spk.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.spk.attach(store);
          object.inv.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.inv.attach(store);
          object.realization.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.realization.attach(store);
          object.mpi.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.mpi.attach(store);
          return object;
        }),
    DetailPembelian: EntityDefinition<DetailPembelian>(
        model: _entities[1],
        toOneRelations: (DetailPembelian object) => [],
        toManyRelations: (DetailPembelian object) => {},
        getId: (DetailPembelian object) => object.id,
        setId: (DetailPembelian object, int id) {
          object.id = id;
        },
        objectToFB: (DetailPembelian object, fb.Builder fbb) {
          final partNameOffset = fbb.writeString(object.partName);
          final nameOffset = fbb.writeString(object.name);
          final pihakIdOffset = fbb.writeString(object.pihakId);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, partNameOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, pihakIdOffset);
          fbb.addInt64(4, object.count);
          fbb.addFloat64(5, object.price);
          fbb.addFloat64(6, object.totalPrice);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DetailPembelian(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              pihakId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              partName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              count:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
              price:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0),
              totalPrice: const fb.Float64Reader()
                  .vTableGet(buffer, rootOffset, 16, 0));

          return object;
        }),
    DetailStock: EntityDefinition<DetailStock>(
        model: _entities[2],
        toOneRelations: (DetailStock object) => [],
        toManyRelations: (DetailStock object) => {},
        getId: (DetailStock object) => object.id,
        setId: (DetailStock object, int id) {
          object.id = id;
        },
        objectToFB: (DetailStock object, fb.Builder fbb) {
          final dateOffset = fbb.writeString(object.date);
          final supplierOffset = fbb.writeString(object.supplier);
          final pihakIdOffset = fbb.writeString(object.pihakId);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, dateOffset);
          fbb.addOffset(2, supplierOffset);
          fbb.addOffset(3, pihakIdOffset);
          fbb.addInt64(4, object.count);
          fbb.addFloat64(5, object.price);
          fbb.addFloat64(6, object.totalPrice);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DetailStock(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              pihakId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              supplier: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              date: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              price:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0),
              count:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
              totalPrice: const fb.Float64Reader()
                  .vTableGet(buffer, rootOffset, 16, 0));

          return object;
        }),
    Invoice: EntityDefinition<Invoice>(
        model: _entities[3],
        toOneRelations: (Invoice object) => [],
        toManyRelations: (Invoice object) =>
            {RelInfo<Invoice>.toMany(1, object.id): object.payments},
        getId: (Invoice object) => object.id,
        setId: (Invoice object, int id) {
          object.id = id;
        },
        objectToFB: (Invoice object, fb.Builder fbb) {
          final invIdOffset = fbb.writeString(object.invId);
          final invoiceDateOffset = fbb.writeString(object.invoiceDate);
          final soDateOffset = fbb.writeString(object.soDate);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, invIdOffset);
          fbb.addFloat64(2, object.saldo);
          fbb.addFloat64(3, object.partTotal);
          fbb.addFloat64(4, object.serviceTotal);
          fbb.addFloat64(5, object.invoiceTotal);
          fbb.addOffset(6, invoiceDateOffset);
          fbb.addOffset(7, soDateOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Invoice(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              invId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              saldo:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0),
              partTotal:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0),
              invoiceDate: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              serviceTotal:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0),
              invoiceTotal:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0),
              soDate: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''));
          InternalToManyAccess.setRelInfo(object.payments, store,
              RelInfo<Invoice>.toMany(1, object.id), store.box<Invoice>());
          return object;
        }),
    Mpi: EntityDefinition<Mpi>(
        model: _entities[4],
        toOneRelations: (Mpi object) => [],
        toManyRelations: (Mpi object) =>
            {RelInfo<Mpi>.toMany(2, object.id): object.items},
        getId: (Mpi object) => object.id,
        setId: (Mpi object, int id) {
          object.id = id;
        },
        objectToFB: (Mpi object, fb.Builder fbb) {
          final mpiIdOffset = fbb.writeString(object.mpiId);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, mpiIdOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Mpi(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              mpiId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''));
          InternalToManyAccess.setRelInfo(object.items, store,
              RelInfo<Mpi>.toMany(2, object.id), store.box<Mpi>());
          return object;
        }),
    MpiItem: EntityDefinition<MpiItem>(
        model: _entities[5],
        toOneRelations: (MpiItem object) => [],
        toManyRelations: (MpiItem object) => {},
        getId: (MpiItem object) => object.id,
        setId: (MpiItem object, int id) {
          object.id = id;
        },
        objectToFB: (MpiItem object, fb.Builder fbb) {
          final categoryOffset = fbb.writeString(object.category);
          final nameOffset = fbb.writeString(object.name);
          final remarkOffset = fbb.writeString(object.remark);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, categoryOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addFloat64(3, object.price);
          fbb.addOffset(4, remarkOffset);
          fbb.addBool(5, object.done);
          fbb.addInt64(6, object.attention);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = MpiItem(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              category: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              attention:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0),
              price:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0),
              remark: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              done: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 14, false));

          return object;
        }),
    Payment: EntityDefinition<Payment>(
        model: _entities[6],
        toOneRelations: (Payment object) => [],
        toManyRelations: (Payment object) => {},
        getId: (Payment object) => object.id,
        setId: (Payment object, int id) {
          object.id = id;
        },
        objectToFB: (Payment object, fb.Builder fbb) {
          final dateOffset = fbb.writeString(object.date);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.pay);
          fbb.addOffset(2, dateOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Payment(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              pay: const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0),
              date: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''));

          return object;
        }),
    Realization: EntityDefinition<Realization>(
        model: _entities[7],
        toOneRelations: (Realization object) => [],
        toManyRelations: (Realization object) => {
              RelInfo<Realization>.toMany(3, object.id): object.mpiItems,
              RelInfo<Realization>.toMany(4, object.id): object.stockItems
            },
        getId: (Realization object) => object.id,
        setId: (Realization object, int id) {
          object.id = id;
        },
        objectToFB: (Realization object, fb.Builder fbb) {
          final rlIdOffset = fbb.writeString(object.rlId);
          final dateOutOffset = fbb.writeString(object.dateOut);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, rlIdOffset);
          fbb.addInt64(2, object.selesai);
          fbb.addFloat64(3, object.biyaya);
          fbb.addOffset(4, dateOutOffset);
          fbb.addBool(5, object.done);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Realization(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              rlId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              dateOut: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              selesai:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              biyaya:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0),
              done: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 14, false));
          InternalToManyAccess.setRelInfo(
              object.mpiItems,
              store,
              RelInfo<Realization>.toMany(3, object.id),
              store.box<Realization>());
          InternalToManyAccess.setRelInfo(
              object.stockItems,
              store,
              RelInfo<Realization>.toMany(4, object.id),
              store.box<Realization>());
          return object;
        }),
    Spk: EntityDefinition<Spk>(
        model: _entities[8],
        toOneRelations: (Spk object) => [],
        toManyRelations: (Spk object) => {},
        getId: (Spk object) => object.id,
        setId: (Spk object, int id) {
          object.id = id;
        },
        objectToFB: (Spk object, fb.Builder fbb) {
          final jtIdOffset = fbb.writeString(object.jtId);
          final customerNameOffset = fbb.writeString(object.customerName);
          final policeNumberOffset = fbb.writeString(object.policeNumber);
          final namaKendaraanOffset = fbb.writeString(object.namaKendaraan);
          final tipeKendaraanOffset = fbb.writeString(object.tipeKendaraan);
          final dateOffset = fbb.writeString(object.date);
          final noPkbOffset = fbb.writeString(object.noPkb);
          final noRangkaOffset = fbb.writeString(object.noRangka);
          final alamatOffset = fbb.writeString(object.alamat);
          final analisaOffset = fbb.writeString(object.analisa);
          final keluhanKonsumenOffset = fbb.writeString(object.keluhanKonsumen);
          final jenisPekrjaanOffset = fbb.writeString(object.jenisPekrjaan);
          final sukuCadangOffset = fbb.writeString(object.sukuCadang);
          final catatanOffset = fbb.writeString(object.catatan);
          final namaMekanikOffset = fbb.writeString(object.namaMekanik);
          final estimasiSelesaiOffset = fbb.writeString(object.estimasiSelesai);
          final namaInspeektorOffset = fbb.writeString(object.namaInspeektor);
          final namaAdvisorOffset = fbb.writeString(object.namaAdvisor);
          fbb.startTable(23);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, jtIdOffset);
          fbb.addOffset(2, customerNameOffset);
          fbb.addOffset(3, policeNumberOffset);
          fbb.addOffset(4, namaKendaraanOffset);
          fbb.addOffset(5, tipeKendaraanOffset);
          fbb.addInt64(6, object.levelPekerjaan);
          fbb.addOffset(7, dateOffset);
          fbb.addInt64(8, object.km);
          fbb.addOffset(9, noPkbOffset);
          fbb.addOffset(10, noRangkaOffset);
          fbb.addOffset(11, alamatOffset);
          fbb.addOffset(12, analisaOffset);
          fbb.addOffset(13, keluhanKonsumenOffset);
          fbb.addOffset(14, jenisPekrjaanOffset);
          fbb.addOffset(15, sukuCadangOffset);
          fbb.addOffset(16, catatanOffset);
          fbb.addOffset(17, namaMekanikOffset);
          fbb.addFloat64(18, object.estimasiBiyaya);
          fbb.addOffset(19, estimasiSelesaiOffset);
          fbb.addOffset(20, namaInspeektorOffset);
          fbb.addOffset(21, namaAdvisorOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Spk(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              jtId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              customerName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              levelPekerjaan:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0),
              jenisPekrjaan: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 32, ''),
              noPkb: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, ''),
              noRangka: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 24, ''),
              tipeKendaraan: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              sukuCadang: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 34, ''),
              km: const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0),
              policeNumber: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 10, ''),
              namaKendaraan: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 12, ''),
              date: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 18, ''),
              alamat: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 26, ''),
              analisa: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 28, ''),
              keluhanKonsumen: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 30, ''),
              catatan: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 36, ''),
              namaMekanik: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 38, ''),
              estimasiBiyaya: const fb.Float64Reader().vTableGet(buffer, rootOffset, 40, 0),
              estimasiSelesai: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 42, ''),
              namaAdvisor: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 46, ''),
              namaInspeektor: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 44, ''));

          return object;
        }),
    Stock: EntityDefinition<Stock>(
        model: _entities[9],
        toOneRelations: (Stock object) => [],
        toManyRelations: (Stock object) =>
            {RelInfo<Stock>.toMany(5, object.id): object.items},
        getId: (Stock object) => object.id,
        setId: (Stock object, int id) {
          object.id = id;
        },
        objectToFB: (Stock object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final partnameOffset = fbb.writeString(object.partname);
          final descOffset = fbb.writeString(object.desc);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, partnameOffset);
          fbb.addOffset(3, descOffset);
          fbb.addInt64(4, object.count);
          fbb.addFloat64(5, object.totalPrice);
          fbb.addInt64(6, object.date);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Stock(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              partname: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              date: const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0),
              desc: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              count:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
              totalPrice: const fb.Float64Reader()
                  .vTableGet(buffer, rootOffset, 14, 0));
          InternalToManyAccess.setRelInfo(object.items, store,
              RelInfo<Stock>.toMany(5, object.id), store.box<Stock>());
          return object;
        }),
    StockRalization: EntityDefinition<StockRalization>(
        model: _entities[10],
        toOneRelations: (StockRalization object) => [object.realization],
        toManyRelations: (StockRalization object) => {},
        getId: (StockRalization object) => object.id,
        setId: (StockRalization object, int id) {
          object.id = id;
        },
        objectToFB: (StockRalization object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final partnameOffset = fbb.writeString(object.partname);
          final descOffset = fbb.writeString(object.desc);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, partnameOffset);
          fbb.addOffset(3, descOffset);
          fbb.addInt64(4, object.realization.targetId);
          fbb.addInt64(5, object.count);
          fbb.addFloat64(6, object.price);
          fbb.addFloat64(7, object.servicePrice);
          fbb.addFloat64(8, object.toalPrice);
          fbb.addBool(9, object.done);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = StockRalization(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              partname: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              desc: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              price:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0),
              count:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0),
              servicePrice:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 18, 0),
              toalPrice:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 20, 0),
              done: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 22, false));
          object.realization.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.realization.attach(store);
          return object;
        }),
    Supplier: EntityDefinition<Supplier>(
        model: _entities[11],
        toOneRelations: (Supplier object) => [],
        toManyRelations: (Supplier object) => {
              RelInfo<Supplier>.toMany(6, object.id): object.items,
              RelInfo<Supplier>.toMany(7, object.id): object.stockItems,
              RelInfo<Supplier>.toMany(8, object.id): object.detailStockItems
            },
        getId: (Supplier object) => object.id,
        setId: (Supplier object, int id) {
          object.id = id;
        },
        objectToFB: (Supplier object, fb.Builder fbb) {
          final supplierOffset = fbb.writeString(object.supplier);
          final descOffset = fbb.writeString(object.desc);
          final dateOffset = fbb.writeString(object.date);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, supplierOffset);
          fbb.addOffset(2, descOffset);
          fbb.addInt64(3, object.count);
          fbb.addOffset(4, dateOffset);
          fbb.addFloat64(5, object.totalPrice);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Supplier(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              date: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              supplier: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              desc: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              count:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0),
              totalPrice: const fb.Float64Reader()
                  .vTableGet(buffer, rootOffset, 14, 0));
          InternalToManyAccess.setRelInfo(object.items, store,
              RelInfo<Supplier>.toMany(6, object.id), store.box<Supplier>());
          InternalToManyAccess.setRelInfo(object.stockItems, store,
              RelInfo<Supplier>.toMany(7, object.id), store.box<Supplier>());
          InternalToManyAccess.setRelInfo(object.detailStockItems, store,
              RelInfo<Supplier>.toMany(8, object.id), store.box<Supplier>());
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Customer] entity fields to define ObjectBox queries.
class Customer_ {
  /// see [Customer.id]
  static final id = QueryIntegerProperty<Customer>(_entities[0].properties[0]);

  /// see [Customer.csId]
  static final csId = QueryStringProperty<Customer>(_entities[0].properties[1]);

  /// see [Customer.customerName]
  static final customerName =
      QueryStringProperty<Customer>(_entities[0].properties[2]);

  /// see [Customer.policeNumber]
  static final policeNumber =
      QueryStringProperty<Customer>(_entities[0].properties[3]);

  /// see [Customer.namaKendaraan]
  static final namaKendaraan =
      QueryStringProperty<Customer>(_entities[0].properties[4]);

  /// see [Customer.alamat]
  static final alamat =
      QueryStringProperty<Customer>(_entities[0].properties[5]);

  /// see [Customer.spk]
  static final spk =
      QueryRelationToOne<Customer, Spk>(_entities[0].properties[6]);

  /// see [Customer.inv]
  static final inv =
      QueryRelationToOne<Customer, Invoice>(_entities[0].properties[7]);

  /// see [Customer.realization]
  static final realization =
      QueryRelationToOne<Customer, Realization>(_entities[0].properties[8]);

  /// see [Customer.mpi]
  static final mpi =
      QueryRelationToOne<Customer, Mpi>(_entities[0].properties[9]);
}

/// [DetailPembelian] entity fields to define ObjectBox queries.
class DetailPembelian_ {
  /// see [DetailPembelian.id]
  static final id =
      QueryIntegerProperty<DetailPembelian>(_entities[1].properties[0]);

  /// see [DetailPembelian.partName]
  static final partName =
      QueryStringProperty<DetailPembelian>(_entities[1].properties[1]);

  /// see [DetailPembelian.name]
  static final name =
      QueryStringProperty<DetailPembelian>(_entities[1].properties[2]);

  /// see [DetailPembelian.pihakId]
  static final pihakId =
      QueryStringProperty<DetailPembelian>(_entities[1].properties[3]);

  /// see [DetailPembelian.count]
  static final count =
      QueryIntegerProperty<DetailPembelian>(_entities[1].properties[4]);

  /// see [DetailPembelian.price]
  static final price =
      QueryDoubleProperty<DetailPembelian>(_entities[1].properties[5]);

  /// see [DetailPembelian.totalPrice]
  static final totalPrice =
      QueryDoubleProperty<DetailPembelian>(_entities[1].properties[6]);
}

/// [DetailStock] entity fields to define ObjectBox queries.
class DetailStock_ {
  /// see [DetailStock.id]
  static final id =
      QueryIntegerProperty<DetailStock>(_entities[2].properties[0]);

  /// see [DetailStock.date]
  static final date =
      QueryStringProperty<DetailStock>(_entities[2].properties[1]);

  /// see [DetailStock.supplier]
  static final supplier =
      QueryStringProperty<DetailStock>(_entities[2].properties[2]);

  /// see [DetailStock.pihakId]
  static final pihakId =
      QueryStringProperty<DetailStock>(_entities[2].properties[3]);

  /// see [DetailStock.count]
  static final count =
      QueryIntegerProperty<DetailStock>(_entities[2].properties[4]);

  /// see [DetailStock.price]
  static final price =
      QueryDoubleProperty<DetailStock>(_entities[2].properties[5]);

  /// see [DetailStock.totalPrice]
  static final totalPrice =
      QueryDoubleProperty<DetailStock>(_entities[2].properties[6]);
}

/// [Invoice] entity fields to define ObjectBox queries.
class Invoice_ {
  /// see [Invoice.id]
  static final id = QueryIntegerProperty<Invoice>(_entities[3].properties[0]);

  /// see [Invoice.invId]
  static final invId = QueryStringProperty<Invoice>(_entities[3].properties[1]);

  /// see [Invoice.saldo]
  static final saldo = QueryDoubleProperty<Invoice>(_entities[3].properties[2]);

  /// see [Invoice.partTotal]
  static final partTotal =
      QueryDoubleProperty<Invoice>(_entities[3].properties[3]);

  /// see [Invoice.serviceTotal]
  static final serviceTotal =
      QueryDoubleProperty<Invoice>(_entities[3].properties[4]);

  /// see [Invoice.invoiceTotal]
  static final invoiceTotal =
      QueryDoubleProperty<Invoice>(_entities[3].properties[5]);

  /// see [Invoice.invoiceDate]
  static final invoiceDate =
      QueryStringProperty<Invoice>(_entities[3].properties[6]);

  /// see [Invoice.soDate]
  static final soDate =
      QueryStringProperty<Invoice>(_entities[3].properties[7]);

  /// see [Invoice.payments]
  static final payments =
      QueryRelationToMany<Invoice, Payment>(_entities[3].relations[0]);
}

/// [Mpi] entity fields to define ObjectBox queries.
class Mpi_ {
  /// see [Mpi.id]
  static final id = QueryIntegerProperty<Mpi>(_entities[4].properties[0]);

  /// see [Mpi.mpiId]
  static final mpiId = QueryStringProperty<Mpi>(_entities[4].properties[1]);

  /// see [Mpi.items]
  static final items =
      QueryRelationToMany<Mpi, MpiItem>(_entities[4].relations[0]);
}

/// [MpiItem] entity fields to define ObjectBox queries.
class MpiItem_ {
  /// see [MpiItem.id]
  static final id = QueryIntegerProperty<MpiItem>(_entities[5].properties[0]);

  /// see [MpiItem.category]
  static final category =
      QueryStringProperty<MpiItem>(_entities[5].properties[1]);

  /// see [MpiItem.name]
  static final name = QueryStringProperty<MpiItem>(_entities[5].properties[2]);

  /// see [MpiItem.price]
  static final price = QueryDoubleProperty<MpiItem>(_entities[5].properties[3]);

  /// see [MpiItem.remark]
  static final remark =
      QueryStringProperty<MpiItem>(_entities[5].properties[4]);

  /// see [MpiItem.done]
  static final done = QueryBooleanProperty<MpiItem>(_entities[5].properties[5]);

  /// see [MpiItem.attention]
  static final attention =
      QueryIntegerProperty<MpiItem>(_entities[5].properties[6]);
}

/// [Payment] entity fields to define ObjectBox queries.
class Payment_ {
  /// see [Payment.id]
  static final id = QueryIntegerProperty<Payment>(_entities[6].properties[0]);

  /// see [Payment.pay]
  static final pay = QueryDoubleProperty<Payment>(_entities[6].properties[1]);

  /// see [Payment.date]
  static final date = QueryStringProperty<Payment>(_entities[6].properties[2]);
}

/// [Realization] entity fields to define ObjectBox queries.
class Realization_ {
  /// see [Realization.id]
  static final id =
      QueryIntegerProperty<Realization>(_entities[7].properties[0]);

  /// see [Realization.rlId]
  static final rlId =
      QueryStringProperty<Realization>(_entities[7].properties[1]);

  /// see [Realization.selesai]
  static final selesai =
      QueryIntegerProperty<Realization>(_entities[7].properties[2]);

  /// see [Realization.biyaya]
  static final biyaya =
      QueryDoubleProperty<Realization>(_entities[7].properties[3]);

  /// see [Realization.dateOut]
  static final dateOut =
      QueryStringProperty<Realization>(_entities[7].properties[4]);

  /// see [Realization.done]
  static final done =
      QueryBooleanProperty<Realization>(_entities[7].properties[5]);

  /// see [Realization.mpiItems]
  static final mpiItems =
      QueryRelationToMany<Realization, MpiItem>(_entities[7].relations[0]);

  /// see [Realization.stockItems]
  static final stockItems = QueryRelationToMany<Realization, StockRalization>(
      _entities[7].relations[1]);
}

/// [Spk] entity fields to define ObjectBox queries.
class Spk_ {
  /// see [Spk.id]
  static final id = QueryIntegerProperty<Spk>(_entities[8].properties[0]);

  /// see [Spk.jtId]
  static final jtId = QueryStringProperty<Spk>(_entities[8].properties[1]);

  /// see [Spk.customerName]
  static final customerName =
      QueryStringProperty<Spk>(_entities[8].properties[2]);

  /// see [Spk.policeNumber]
  static final policeNumber =
      QueryStringProperty<Spk>(_entities[8].properties[3]);

  /// see [Spk.namaKendaraan]
  static final namaKendaraan =
      QueryStringProperty<Spk>(_entities[8].properties[4]);

  /// see [Spk.tipeKendaraan]
  static final tipeKendaraan =
      QueryStringProperty<Spk>(_entities[8].properties[5]);

  /// see [Spk.levelPekerjaan]
  static final levelPekerjaan =
      QueryIntegerProperty<Spk>(_entities[8].properties[6]);

  /// see [Spk.date]
  static final date = QueryStringProperty<Spk>(_entities[8].properties[7]);

  /// see [Spk.km]
  static final km = QueryIntegerProperty<Spk>(_entities[8].properties[8]);

  /// see [Spk.noPkb]
  static final noPkb = QueryStringProperty<Spk>(_entities[8].properties[9]);

  /// see [Spk.noRangka]
  static final noRangka = QueryStringProperty<Spk>(_entities[8].properties[10]);

  /// see [Spk.alamat]
  static final alamat = QueryStringProperty<Spk>(_entities[8].properties[11]);

  /// see [Spk.analisa]
  static final analisa = QueryStringProperty<Spk>(_entities[8].properties[12]);

  /// see [Spk.keluhanKonsumen]
  static final keluhanKonsumen =
      QueryStringProperty<Spk>(_entities[8].properties[13]);

  /// see [Spk.jenisPekrjaan]
  static final jenisPekrjaan =
      QueryStringProperty<Spk>(_entities[8].properties[14]);

  /// see [Spk.sukuCadang]
  static final sukuCadang =
      QueryStringProperty<Spk>(_entities[8].properties[15]);

  /// see [Spk.catatan]
  static final catatan = QueryStringProperty<Spk>(_entities[8].properties[16]);

  /// see [Spk.namaMekanik]
  static final namaMekanik =
      QueryStringProperty<Spk>(_entities[8].properties[17]);

  /// see [Spk.estimasiBiyaya]
  static final estimasiBiyaya =
      QueryDoubleProperty<Spk>(_entities[8].properties[18]);

  /// see [Spk.estimasiSelesai]
  static final estimasiSelesai =
      QueryStringProperty<Spk>(_entities[8].properties[19]);

  /// see [Spk.namaInspeektor]
  static final namaInspeektor =
      QueryStringProperty<Spk>(_entities[8].properties[20]);

  /// see [Spk.namaAdvisor]
  static final namaAdvisor =
      QueryStringProperty<Spk>(_entities[8].properties[21]);
}

/// [Stock] entity fields to define ObjectBox queries.
class Stock_ {
  /// see [Stock.id]
  static final id = QueryIntegerProperty<Stock>(_entities[9].properties[0]);

  /// see [Stock.name]
  static final name = QueryStringProperty<Stock>(_entities[9].properties[1]);

  /// see [Stock.partname]
  static final partname =
      QueryStringProperty<Stock>(_entities[9].properties[2]);

  /// see [Stock.desc]
  static final desc = QueryStringProperty<Stock>(_entities[9].properties[3]);

  /// see [Stock.count]
  static final count = QueryIntegerProperty<Stock>(_entities[9].properties[4]);

  /// see [Stock.totalPrice]
  static final totalPrice =
      QueryDoubleProperty<Stock>(_entities[9].properties[5]);

  /// see [Stock.date]
  static final date = QueryIntegerProperty<Stock>(_entities[9].properties[6]);

  /// see [Stock.items]
  static final items =
      QueryRelationToMany<Stock, DetailStock>(_entities[9].relations[0]);
}

/// [StockRalization] entity fields to define ObjectBox queries.
class StockRalization_ {
  /// see [StockRalization.id]
  static final id =
      QueryIntegerProperty<StockRalization>(_entities[10].properties[0]);

  /// see [StockRalization.name]
  static final name =
      QueryStringProperty<StockRalization>(_entities[10].properties[1]);

  /// see [StockRalization.partname]
  static final partname =
      QueryStringProperty<StockRalization>(_entities[10].properties[2]);

  /// see [StockRalization.desc]
  static final desc =
      QueryStringProperty<StockRalization>(_entities[10].properties[3]);

  /// see [StockRalization.realization]
  static final realization =
      QueryRelationToOne<StockRalization, Stock>(_entities[10].properties[4]);

  /// see [StockRalization.count]
  static final count =
      QueryIntegerProperty<StockRalization>(_entities[10].properties[5]);

  /// see [StockRalization.price]
  static final price =
      QueryDoubleProperty<StockRalization>(_entities[10].properties[6]);

  /// see [StockRalization.servicePrice]
  static final servicePrice =
      QueryDoubleProperty<StockRalization>(_entities[10].properties[7]);

  /// see [StockRalization.toalPrice]
  static final toalPrice =
      QueryDoubleProperty<StockRalization>(_entities[10].properties[8]);

  /// see [StockRalization.done]
  static final done =
      QueryBooleanProperty<StockRalization>(_entities[10].properties[9]);
}

/// [Supplier] entity fields to define ObjectBox queries.
class Supplier_ {
  /// see [Supplier.id]
  static final id = QueryIntegerProperty<Supplier>(_entities[11].properties[0]);

  /// see [Supplier.supplier]
  static final supplier =
      QueryStringProperty<Supplier>(_entities[11].properties[1]);

  /// see [Supplier.desc]
  static final desc =
      QueryStringProperty<Supplier>(_entities[11].properties[2]);

  /// see [Supplier.count]
  static final count =
      QueryIntegerProperty<Supplier>(_entities[11].properties[3]);

  /// see [Supplier.date]
  static final date =
      QueryStringProperty<Supplier>(_entities[11].properties[4]);

  /// see [Supplier.totalPrice]
  static final totalPrice =
      QueryDoubleProperty<Supplier>(_entities[11].properties[5]);

  /// see [Supplier.items]
  static final items = QueryRelationToMany<Supplier, DetailPembelian>(
      _entities[11].relations[0]);

  /// see [Supplier.stockItems]
  static final stockItems =
      QueryRelationToMany<Supplier, Stock>(_entities[11].relations[1]);

  /// see [Supplier.detailStockItems]
  static final detailStockItems =
      QueryRelationToMany<Supplier, DetailStock>(_entities[11].relations[2]);
}
